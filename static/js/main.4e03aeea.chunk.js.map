{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setmode","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4e03aeea.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>*/}\r\n            </ul>\r\n              \r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={()=>props.toggleMode(null)} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to Uppercase!\",\"success\")\r\n    }\r\n    const handleLoClick = ()=>{        \r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\" Converted to Lowercase!\",\"success\")\r\n    }\r\n    const handleClearClick = ()=>{        \r\n        let newText='';\r\n        setText(newText);\r\n        props.showAlert(\" Text is cleared\",\"success\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{        \r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = ()=>{        \r\n        navigator.clipboard.writeText(text);        \r\n        props.showAlert(\" Copied to clipboard!\",\"success\")\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{        \r\n       let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\" Extra spaces removed!\",\"success\")\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color :props.mode==='dark'?'white':'#042743'}}>         \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">        \r\n            <textarea className=\"form-control\" value={text} style={{backgroundColor :props.mode==='dark'?'#13466e':'white',color :props.mode==='dark'?'white':'#042743'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color :props.mode==='dark'?'white':'#042743'}}>   \r\n        <h2>Your Text Summary</h2>\r\n        <p><b>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length}</b> words, <b>{text.length}</b> characters</p> \r\n        <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read </p> \r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something in the textbox to Preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n       <div style={{height:'50px'}}>\r\n          {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}         \r\n            </div>}\r\n            </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","//import logo from './logo.svg';\nimport './App.css';\n //import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [alert, setalert] = useState(null)\n\n  const showAlert=(message,type)=>{\n    setalert({\n      msg: message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n \n  const toggleMode=()=>{\n    \n    if(mode==='light'){\n      setmode('dark')\n      document.body.style.backgroundColor='#042743';\n      showAlert(\" Dark mode hads been enabled\",\"success\");\n      document.title='Textutils - Dark mode';\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor='white';\n      showAlert(\" Light mode hads been enabled\",\"success\");\n      document.title='Textutils - Light mode';\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n      \n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>         */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>          \n          {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}